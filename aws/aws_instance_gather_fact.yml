---
- name: Gather instance fact
  hosts: all
  #connection: local
  gather_facts: false
  remote_user: ec2-user
  
  vars:
    aap_url: "{{ host }}"
    aap_token: "{{ CONTROLLER_OAUTH_TOKEN }}"
    # aap_inventory_id: "YOUR_AAP_INVENTORY_ID"

  tasks:
    - name: print aap_url & aap_token vars
      debug:
        msg: "aap_url: {{ aap_url }}, aap_token: {{ aap_token }}"

    - name: Display inventory hostname variables
      debug:
        var: inventory_hostname
      when: inventory_hostname == ec2.instances[0].private_dns_name

    - name: Query AAP inventory to obtain host ID
      ansible.builtin.uri:
        url: "{{ aap_url }}/api/v2/inventories/{{ aap_inventory_id }}/hosts/?name={{ ec2.instances[0].private_dns_name }}"
        method: GET
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ aap_token }}"
        status_code: 200 # Expect a "OK" status on success
        validate_certs: yes # Set to 'no' for self-signed certs
      register: aap_host_query
      when: inventory_hostname == ec2.instances[0].private_dns_name

    - name: Print aap_host_query
      debug:
        var: aap_host_query

    - name: Query AAP inventory to obtain variable data
      ansible.builtin.uri:
        url: "{{ aap_url }}/api/v2/hosts/{{ aap_host_query.json.results[0].id }}/variable_data/"
        method: GET
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ aap_token }}"
        status_code: 200 # Expect a "OK" status on success
        validate_certs: yes # Set to 'no' for self-signed certs
      register: aap_host_vars
      when: aap_host_query.json.results | length > 0

    - name: gather hostname from RHEL
      ansible.builtin.command: "hostname"
      register: hostname
      when: inventory_hostname == ec2.instances[0].private_dns_name

    - name: Display hostname
      debug:
        msg: "{{ hostname.stdout }}"
      when: inventory_hostname == ec2.instances[0].private_dns_name
