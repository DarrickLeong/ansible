---
- name: Migration AAP24RPM to AAP24OCP
  hosts: all
  #connection: local
  gather_facts: true

#vars to be customized
  vars:
    pg_password: Admin123!
    pg_user: awx
    artifact_path: /home/darrick/ansible/migration/artifact
    backup_path: /home/darrick/ansible/migration/backup
    setupsh_path: /home/darrick/ansible/ansible-automation-platform-setup-2.4-13/setup.sh
    pg_database: ansible24pg1.dlnuc.com
    hub_database_name: automationhub
    controller_database_name: awx
    aap_version: 2.4 # The version being migrated
    platform_type: rpm # The source platform type
    controller_version: 4.5.25
    hub_version: 4.9.5
  
  tasks:
# Gather facts of all instances Controller/Automation Hub/PostgreSQL/Execution Nodes#
  - name: Gather facts of all instances
    debug:
      var: ansible_facts

  - name: Check or install postgresql on localhost
    ansible.builtin.yum:
      name: postgresql
      state: present
    when: "'localhost' in group_names"
  
  - name: Create artifact directory on localhost
    ansible.builtin.file:
      path: "{{ artifact_path }}"
      state: directory
    when: "'localhost' in group_names"
  
  - name: Create Manifest file
    ansible.builtin.template:
      src: ../templates/manifest.yml.j2
      dest: "{{ artifact_path }}/manifest.yml"
    when: "'localhost' in group_names"

  - name: Verify PostgreSQL version
    ansible.builtin.command: "psql -U {{ pg_user }} -c 'SELECT version();'"
    environment:
      PGPASSWORD: "{{ pg_password }}"
    register: postgresql_version
    when: "'database' in group_names"

#Display PostgreSQL version, PostgreSQL version should be at least 15#
  - name: Display PostgreSQL version 
    debug:
      msg: "{{ postgresql_version.stdout }}"
    when: "'database' in group_names"

  - name: Check if backup files already exist
    ansible.builtin.stat:
      path: "{{ backup_path }}"
    register: backup_stat
    when: "'localhost' in group_names"

  # - name: Create a complete backup of the source environment
  #   ansible.builtin.command: "{{ setupsh_path }} -e 'backup_dest={{ backup_path }}' -b"
  #   when: "'localhost' in group_names"

#Obtain the connection settings#
  - name: Access the automation controller
    ansible.builtin.command: "awx-manage print_settings | grep '^DATABASES'"
    when: "'automationcontroller' in group_names"
    register: controller_db_settings

  - name: Access the automation hub Nodes
    ansible.builtin.command: "grep '^DATABASES' /etc/pulp/settings.py"
    register: hub_db_settings
    when: "'automationhub' in group_names"

#create artifact directories controller/hub/custom_configs#
  - name: Create controller directory
    ansible.builtin.file:
      path: "{{ artifact_path }}/controller"
      state: directory
    when: "'localhost' in group_names"

  - name: Create hub directory
    ansible.builtin.file:
      path: "{{ artifact_path }}/hub"
      state: directory
    when: "'localhost' in group_names"

  - name: Create custom_configs directory
    ansible.builtin.file:
      path: "{{ artifact_path }}/controller/custom_configs"
      state: directory
    when: "'localhost' in group_names"

#Validate the database size and make sure you have enough space on the filesystem for the pg_dump#
  - name: Check postgres db size
    ansible.builtin.command: "psql -U {{ pg_user }} -c '\\l+'"
    environment:
      PGPASSWORD: "{{ pg_password }}"
    register: postgresql_size
    when: "'database' in group_names"

  - name: Display PostgreSQL db size
    debug:
      msg: "{{ postgresql_size.stdout }}"
    when: "'database' in group_names"

#Export secrets from the RPM environment from one node of each component group#
  - name: Export secrets from the Automation Controller
    ansible.builtin.command: "cat /etc/tower/SECRET_KEY"
    register: controller_secret
    when: "'automationcontroller' in group_names"

  - name: print controller_secret
    debug:
      msg: "{{ controller_secret.stdout }}"
    when: "'automationcontroller' in group_names"

  - name: Export secret key from the Automation Hub
    ansible.builtin.shell: "grep 'SECRET_KEY' /etc/pulp/settings.py | awk -F'=' '{ print $2}'"
    register: hub_secret
    when: "'automationhub' in group_names"
  
  - name: print hub_secret
    debug:
      msg: "{{ hub_secret.stdout }}"
    when: "'automationhub' in group_names"

  - name: Export automation hub node symmetric.key
    ansible.builtin.command: "cat /etc/pulp/certs/database_fields.symmetric.key"
    register: hub_node_key
    when: "'automationhub' in group_names"

  - name: print hub_node_key
    debug:
      msg: "{{ hub_node_key.stdout }}"
    when: "'automationhub' in group_names"

  - name: create secrets.yml file
    ansible.builtin.template:
      src: ../templates/secrets.yml.j2
      dest: "{{ artifact_path }}/secrets.yml"
    when: "'localhost' in group_names"

#Export automation controller custom configurations to localhost#
  - name: Pull configs from controller using rsync
    ansible.builtin.shell: |
      rsync -avz \
        --exclude 'postgres.py' \
        --exclude 'channels.py' \
        --exclude 'caching.py' \
        --exclude 'cluster_host_id.py' \
        root@{{ groups['automationcontroller'][0] }}:/etc/tower/conf.d/ \
        darrick@bastion.dlnuc.com:"{{ artifact_path }}/controller/custom_configs/" # <-- Change this path
    when: "'automationcontroller' in group_names"
    register: rsync_result

  - name: List files at the folder
    ansible.builtin.command: "ls -l {{ artifact_path }}/controller/custom_configs/" # <-- Change this path
    when: "'localhost' in group_names"
    register: list_files

  - name: Display list of files
    debug:
      msg: "{{ list_files.stdout }}"
    when: "'localhost' in group_names"
  
# #Database dumps of all components#
#   - name: Verify Automation Controller database connectivity
#     ansible.builtin.command: "psql -h {{ pg_database }} -U {{ pg_user }} -d awx -t -c 'SHOW server_version;'"
#     environment:
#       PGPASSWORD: "{{ pg_password }}"
#     register: controller_db_connectivity
#     when: "'localhost' in group_names"

#   - name: Dump Automation Controller database
#     ansible.builtin.command: "pg_dump -h {{ controller_pg_hostname }} -U {{ controller_pg_user }} -d {{ controller_database_name }} --clean --create -Fc -f '{{ artifact_path }}/controller/controller.pgc'"
#     environment:
#       PGPASSWORD: "{{ pg_password }}"
#     when: "'localhost' in group_names"

#   - name: Dump Automation Hub database
#     ansible.builtin.command: "pg_dump -h {{ hub_pg_hostname }} -U {{ hub_pg_user }} -d {{ hub_database_name }} --clean --create -Fc -f '{{ artifact_path }}/hub/hub_db.pgc'"
#     environment:
#       PGPASSWORD: "{{ hub_pg_password }}"
#     when: "'localhost' in group_names"

#   - name: Check file is present
#     ansible.builtin.stat:
#       path: "{{ artifact_path }}/controller/controller.pgc"
#     register: controller_dump
#     when: "'localhost' in group_names"

#   - name: Display controller dump file info
#     debug:
#       var: controller_dump
#     when: "'localhost' in group_names"

#   - name: Add controller database name to secrets file
#     ansible.builtin.shell: echo "controller_pg_database: {{ controller_database_name }}" >> secrets.yml
#     when: "'localhost' in group_names"

#   - name: Check file is present
#     ansible.builtin.stat:
#       path: "{{ artifact_path }}/hub/hub_db.pgc"
#     register: hub_dump
#     when: "'localhost' in group_names"

#   - name: Display hub dump file info
#     debug:
#       var: hub_dump
#     when: "'localhost' in group_names"

#   - name: Add hub database name to secrets file
#     ansible.builtin.shell: echo "hub_pg_database: {{ hub_database_name }}" >> secrets.yml
#     when: "'localhost' in group_names"