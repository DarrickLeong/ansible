---
- name: AAP24OCP Import Migration
  hosts: all
  #connection: local
  gather_facts: true

#vars to be customized
  vars:
  
  tasks:
# Begin by scaling down the Ansible Automation Platform deployment #
oc patch automationcontrollers ansiblecontroller --type merge -p '{"spec":{"idle_deployment":true}}' -n aap

oc patch automationcontrollers ansiblecontroller --type merge -p '{"spec":{"replicas":0}}' -n aap

oc patch automationhubs automationhub --type merge -p '{"spec":{"worker":{"replicas":0}}}' -n aap
oc patch automationhubs automationhub --type merge -p '{"spec":{"web":{"replicas":0}}}' -n aap
oc patch automationhubs automationhub --type merge -p '{"spec":{"content":{"replicas":0}}}' -n aap
oc patch automationhubs automationhub --type merge -p '{"spec":{"api":{"replicas":0}}}' -n aap
oc patch automationhubs automationhub --type merge -p '{"spec":{"redis":{"replicas":0}}}' -n aap
oc patch automationhubs automationhub --type merge -p '{"spec":{"resource_manager":{"replicas":0}}}' -n aap

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: aap-temp-pvc
  namespace: aap
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi

oc create -f aap-temp-pvc.yml

echo $(oc get pod/ansiblecontroller-postgres-15-0 -o jsonpath="{.spec.containers[*].image}") -n aap
registry.redhat.io/rhel8/postgresql-15@sha256:b70af4767a5b34c4a67761aa28bee72b4f9cd1ce31245596640371f670d0dbba

echo $(oc get pod/automationhub-postgres-15-0 -o jsonpath="{.spec.containers[*].image}") -n aap
registry.redhat.io/rhel8/postgresql-15@sha256:b70af4767a5b34c4a67761aa28bee72b4f9cd1ce31245596640371f670d0dbba -n aap

kind: Deployment
apiVersion: apps/v1
metadata:
  name: aap-temp-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: aap-temp-postgres
  template:
    metadata:
      labels:
        app: aap-temp-postgres
    spec:
      containers:
        - name: aap-temp-postgres
          image: <postgres image from previous step>
          command:
            - /bin/sh
            - '-c'
            - sleep infinity
          imagePullPolicy: Always
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: aap-temp-pvc
              mountPath: /tmp/aap-temp-pvc
      volumes:
        - name: aap-temp-pvc
          persistentVolumeClaim:
            claimName: aap-temp-pvc

oc create -f aap-temp-postgres.yml

export AAP_TEMP_POSTGRES=$(oc get pods --no-headers -o custom-columns="NAME:.metadata.name" | grep aap-temp-postgres)
echo $AAP_TEMP_POSTGRES
aap-temp-postgres-c697847d7-7sgl7

oc cp artifact.tar $AAP_TEMP_POSTGRES:/tmp/aap-temp-pvc/
oc cp artifact.tar.sha256 $AAP_TEMP_POSTGRES:/tmp/aap-temp-pvc/

echo
for secret in ansiblecontroller-postgres-configuration automationhub-postgres-configuration
do
  echo $secret
  echo "PASSWORD: `oc get secrets $secret -o jsonpath="{.data['password']}" | base64 -d`"
  echo "USER: `oc get secrets $secret -o jsonpath="{.data['username']}" | base64 -d`"
  echo "DATABASE: `oc get secrets $secret -o jsonpath="{.data['database']}" | base64 -d`"
  echo
done && echo "POSTGRES ADMIN PASSWORD: `oc get secrets aap-gateway-postgres-configuration -o jsonpath="{.data['postgres_admin_password']}" | base64 -d`"

ansiblecontroller-postgres-configuration
PASSWORD: irbtrY7KMvuprGXdUODM67K4B1X8prXx
USER: automationcontroller
DATABASE: automationcontroller

automationhub-postgres-configuration
PASSWORD: EqJp0eSENFXb7WqxnLUzuMNNBzrw1rnw
USER: automationhub
DATABASE: automationhub

Error from server (NotFound): secrets "aap-gateway-postgres-configuration" not found
POSTGRES ADMIN PASSWORD:


#####Automationcontroller postgres#########
Drop the automation controller database:
dropdb -h ansiblecontroller-postgres-15 -U automationcontroller automationcontroller


psql -h ansiblecontroller-postgres-15 -U automationcontroller -d postgres

Alter the user temporarily with the CREATEDB role:
psql #become root user
postgres=# ALTER USER automationcontroller WITH CREATEDB;

Create the database:
createdb -h ansiblecontroller-postgres-15 -U automationcontroller automationcontroller

Revert temporary user permission:
postgres=# ALTER USER automationcontroller WITH NOCREATEDB;

Restore the automation controller database:
pg_restore --clean --if-exists --no-owner -h ansiblecontroller-postgres-15 -U automationcontroller -d automationcontroller controller/controller.pgc

#Restore the platform gateway database:
#pg_restore --clean --if-exists --no-owner -h aap-postgres-15 -U gateway -d gateway gateway/gateway.pgc


Exit the pod:

exit

Replace database field encryption secrets.

controller_pg_database: ansible24pg1.dlnuc.com
controller_secret_key: KMTICyZKVT7UA3AD7gXY6VFDv40X37nKjRzo9dTo6LVT
# gateway_pg_database: <redacted>
# gateway_secret_key: <redacted>
hub_pg_database: ansible24pg1.dlnuc.com
hub_secret_key: '0RMx0574Wa:xvfvGn.ac3kTsS8n_FVenM5WcHWhqpZ,ygzAPh3TjxPzWNvAuc8sovR4dRzU7UKdLR1ON-yXFzWB,oj6k1x0S_eu2.W6gLRA3APcfzyLiTJYfdjua4ia9'
hub_db_fields_encryption_key: 8bTuQ29f4eUUCLcKcE5dPX5Mi5joQKa9SDPcylO7lxY=

oc set data secret/ansiblecontroller-secret-key secret_key="KMTICyZKVT7UA3AD7gXY6VFDv40X37nKjRzo9dTo6LVT"
#oc set data secret/aap-db-fields-encryption-secret secret_key="<unencoded gateway_secret_key value from secrets.yml>"
#oc set data secret/automationhub-db-fields-encryption database_fields.symmetric.key="<unencoded hub_db_fields_encryption_key value from secrets.yml>"

#scale back up automation controller.
oc patch automationcontrollers ansiblecontroller --type merge -p '{"spec":{"replicas":1}}' -n aap

#Run awx-manage to deprovision instances.
Obtain the automation controller pod:
export AAP_CONTROLLER_POD=$(oc get pods --no-headers -o custom-columns=":metadata.name" | grep ansiblecontroller-task)

Test the environment variable:
echo $AAP_CONTROLLER_POD

Example output:
aap-controller-task-759b6d9759-r59q9

Enter into the automation controller pod:
oc exec -it $AAP_CONTROLLER_POD -- /bin/bash
awx-manage list_instances

example output:
bash-4.4$ awx-manage list_instances
[controlplane capacity=314 policy=100%]
	ansible24c1.dlnuc.com capacity=0 node_type=hybrid version=4.5.25
	ansible24c2.dlnuc.com capacity=0 node_type=hybrid version=4.5.25
	ansiblecontroller-task-5c5778588b-k7msj capacity=314 node_type=control version=4.5.25 heartbeat="2025-10-03 18:27:43"

[instancegrp1 capacity=0]
	ansible24e1.dlnuc.com capacity=0 node_type=execution version=ansible-runner-2.3.6

[instancegrp2 capacity=0]
	ansible24e2.dlnuc.com capacity=0 node_type=execution version=ansible-runner-2.3.6

[default capacity=0 policy=100%]
	ansible24c1.dlnuc.com capacity=0 node_type=hybrid version=4.5.25
	ansible24c2.dlnuc.com capacity=0 node_type=hybrid version=4.5.25
	ansible24e1.dlnuc.com capacity=0 node_type=execution version=ansible-runner-2.3.6
	ansible24e2.dlnuc.com capacity=0 node_type=execution version=ansible-runner-2.3.6

Remove old nodes with awx-manage, leaving only aap-controller-task:
awx-manage deprovision_instance --host=ansible24e1.dlnuc.com
awx-manage deprovision_instance --host=ansible24e2.dlnuc.com
awx-manage deprovision_instance --host=ansible24c1.dlnuc.com
awx-manage deprovision_instance --host=ansible24c2.dlnuc.com

# Example output:
# bash-4.4$
# [controlplane capacity=642 policy=100%]
# aap-controller-task-759b6d9759-r59q9 capacity=642 node_type=control version=4.6.15 heartbeat="2025-06-12 21:39:48"
# node1.example.org capacity=0 node_type=hybrid version=4.6.13 heartbeat="2025-05-30 17:22:11"
# [default capacity=0 policy=100%]
# node1.example.org capacity=0 node_type=hybrid version=4.6.13 heartbeat="2025-05-30 17:22:11"
# node2.example.org capacity=0 node_type=execution version ansible-runner-2.4.1 heartbeat="2025-05-30 17:22:08"

# Remove old nodes with awx-manage, leaving only aap-controller-task:
# awx-manage deprovision_instance --host=node1.example.org
# awx-manage deprovision_instance --host=node2.example.org


#####Automationhub postgres#########
#Scale down all Automation hub deployments manually, starting with operator and then the rest of the deployments

Drop the automation hub database:
dropdb -h automationhub-postgres-15 -U automationhub automationhub

psql -h automationhub-postgres-15 -U automationhub -d postgres``

Alter the user temporarily with the CREATEDB role:
psql #become root user
postgres=# ALTER USER automationhub WITH CREATEDB;

Create the database:
createdb -h automationhub-postgres-15 -U automationhub automationhub

Revert temporary user permission:
postgres=# ALTER USER automationcontroller WITH NOCREATEDB;

Restore the automation hub database:
pg_restore --clean --if-exists --no-owner -h automationhub-postgres-15 -U automationhub -d automationhub hub/hub_db.pgc

# Restore the platform gateway database:
# pg_restore --clean --if-exists --no-owner -h aap-postgres-15 -U gateway -d gateway gateway/gateway.pgc


Exit the pod:
exit

Replace database field encryption secrets.

controller_pg_database: ansible24pg1.dlnuc.com
controller_secret_key: KMTICyZKVT7UA3AD7gXY6VFDv40X37nKjRzo9dTo6LVT
# gateway_pg_database: <redacted>
# gateway_secret_key: <redacted>
hub_pg_database: ansible24pg1.dlnuc.com
hub_secret_key: '0RMx0574Wa:xvfvGn.ac3kTsS8n_FVenM5WcHWhqpZ,ygzAPh3TjxPzWNvAuc8sovR4dRzU7UKdLR1ON-yXFzWB,oj6k1x0S_eu2.W6gLRA3APcfzyLiTJYfdjua4ia9'
hub_db_fields_encryption_key: 8bTuQ29f4eUUCLcKcE5dPX5Mi5joQKa9SDPcylO7lxY=

#oc set data secret/aap-db-fields-encryption-secret secret_key="<unencoded gateway_secret_key value from secrets.yml>"
oc set data secret/automationhub-db-fields-encryption database_fields.symmetric.key="8bTuQ29f4eUUCLcKcE5dPX5Mi5joQKa9SDPcylO7lxY="

#Scale back all Automation hub deployments manually, via the operator.

curl -d '{"verify_checksums": true}' -X POST -k https://automationhub-aap.apps.cluster-6zjzq.6zjzq.sandbox5539.opentlc.com/api/galaxy/pulp/api/v3/repair/ -u admin:Admin123!

######################################

Clean up the temporary PostgreSQL and PVC.
oc delete -f aap-temp-postgres.yaml
oc delete -f aap-temp-pvc.yaml